<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\MorphTo;

class Exception extends Model
{
    use HasFactory;

    protected $fillable = [
        'title',
        'description',
        'type',
        'category',
        'severity',
        'department_id',
        'exceptionable_type',
        'exceptionable_id',
        'status',
        'priority',
        'assigned_to',
        'assigned_at',
        'resolved_at',
        'resolved_by',
        'resolution_notes',
        'auto_generated',
        'source',
        'metadata',
        'created_by',
        'updated_by'
    ];

    protected $casts = [
        'metadata' => 'array',
        'assigned_at' => 'datetime',
        'resolved_at' => 'datetime',
        'auto_generated' => 'boolean',
    ];

    // Relationships
    public function department(): BelongsTo
    {
        return $this->belongsTo(Department::class);
    }

    public function exceptionable(): MorphTo
    {
        return $this->morphTo();
    }

    public function assignedTo(): BelongsTo
    {
        return $this->belongsTo(User::class, 'assigned_to');
    }

    public function resolvedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'resolved_by');
    }

    public function createdBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function updatedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'updated_by');
    }

    // Scopes
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    public function scopeByType($query, $type)
    {
        return $query->where('type', $type);
    }

    public function scopeByCategory($query, $category)
    {
        return $query->where('category', $category);
    }

    public function scopeBySeverity($query, $severity)
    {
        return $query->where('severity', $severity);
    }

    public function scopeByDepartment($query, $departmentId)
    {
        return $query->where('department_id', $departmentId);
    }

    public function scopeUnassigned($query)
    {
        return $query->whereNull('assigned_to');
    }

    public function scopeUnresolved($query)
    {
        return $query->whereNull('resolved_at');
    }

    public function scopeAutoGenerated($query)
    {
        return $query->where('auto_generated', true);
    }

    public function scopeHighPriority($query)
    {
        return $query->whereIn('severity', ['critical', 'high']);
    }

    // Helper methods
    public function getSeverityColorAttribute()
    {
        return match($this->severity) {
            'critical' => 'red',
            'high' => 'orange',
            'medium' => 'yellow',
            'low' => 'blue',
            default => 'gray'
        };
    }

    public function getSeverityIconAttribute()
    {
        return match($this->severity) {
            'critical' => 'exclamation-triangle',
            'high' => 'exclamation-circle',
            'medium' => 'exclamation',
            'low' => 'info-circle',
            default => 'info'
        };
    }

    public function getStatusColorAttribute()
    {
        return match($this->status) {
            'active' => 'red',
            'assigned' => 'yellow',
            'in_progress' => 'blue',
            'resolved' => 'green',
            default => 'gray'
        };
    }

    public function isAssigned()
    {
        return !is_null($this->assigned_to);
    }

    public function isResolved()
    {
        return !is_null($this->resolved_at);
    }

    public function assign($userId)
    {
        $this->update([
            'assigned_to' => $userId,
            'assigned_at' => now(),
            'status' => 'assigned'
        ]);
    }

    public function markInProgress()
    {
        $this->update([
            'status' => 'in_progress'
        ]);
    }

    public function resolve($userId, $notes = null)
    {
        $this->update([
            'resolved_at' => now(),
            'resolved_by' => $userId,
            'status' => 'resolved',
            'resolution_notes' => $notes
        ]);
    }

    public function getTimeSinceCreatedAttribute()
    {
        return $this->created_at->diffForHumans();
    }

    public function getTimeSinceAssignedAttribute()
    {
        return $this->assigned_at?->diffForHumans();
    }

    public function getTimeSinceResolvedAttribute()
    {
        return $this->resolved_at?->diffForHumans();
    }

    public function getAgeInHoursAttribute()
    {
        return $this->created_at->diffInHours(now());
    }

    public function getAgeInDaysAttribute()
    {
        return $this->created_at->diffInDays(now());
    }

    // Static methods
    public static function getActiveExceptions()
    {
        return static::with(['department', 'assignedTo', 'createdBy'])
            ->active()
            ->orderBy('severity', 'desc')
            ->orderBy('created_at', 'desc')
            ->get();
    }

    public static function getExceptionsByDepartment($departmentId)
    {
        return static::with(['department', 'assignedTo', 'createdBy'])
            ->byDepartment($departmentId)
            ->orderBy('severity', 'desc')
            ->orderBy('created_at', 'desc')
            ->get();
    }

    public static function getCriticalExceptions()
    {
        return static::with(['department', 'assignedTo', 'createdBy'])
            ->bySeverity('critical')
            ->active()
            ->orderBy('created_at', 'desc')
            ->get();
    }

    public static function getExceptionCounts()
    {
        return [
            'total' => static::count(),
            'active' => static::active()->count(),
            'critical' => static::bySeverity('critical')->active()->count(),
            'high' => static::bySeverity('high')->active()->count(),
            'medium' => static::bySeverity('medium')->active()->count(),
            'low' => static::bySeverity('low')->active()->count(),
            'unassigned' => static::unassigned()->count(),
            'unresolved' => static::unresolved()->count(),
            'auto_generated' => static::autoGenerated()->count(),
        ];
    }

    public static function createException($data)
    {
        return static::create([
            'title' => $data['title'],
            'description' => $data['description'],
            'type' => $data['type'],
            'category' => $data['category'],
            'severity' => $data['severity'] ?? 'medium',
            'department_id' => $data['department_id'] ?? null,
            'exceptionable_type' => $data['exceptionable_type'] ?? null,
            'exceptionable_id' => $data['exceptionable_id'] ?? null,
            'status' => 'active',
            'priority' => $data['priority'] ?? 'normal',
            'auto_generated' => $data['auto_generated'] ?? false,
            'source' => $data['source'] ?? 'system',
            'metadata' => $data['metadata'] ?? [],
            'created_by' => $data['created_by'] ?? auth()->id(),
        ]);
    }

    public static function getExceptionTrends($days = 30)
    {
        return static::where('created_at', '>=', now()->subDays($days))
            ->groupBy('date')
            ->selectRaw('DATE(created_at) as date, COUNT(*) as count')
            ->orderBy('date')
            ->get();
    }
} 