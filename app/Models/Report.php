<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Report extends Model
{
    use HasFactory;

    protected $fillable = [
        'report_name',
        'report_type',
        'report_category',
        'report_config',
        'report_data',
        'generated_by',
        'template_id',
        'file_path',
        'file_size',
        'format',
        'status',
        'scheduled_at',
        'generated_at',
        'expires_at',
        'metadata'
    ];

    protected $casts = [
        'report_config' => 'array',
        'report_data' => 'array',
        'scheduled_at' => 'datetime',
        'generated_at' => 'datetime',
        'expires_at' => 'datetime',
        'metadata' => 'array'
    ];

    /**
     * Get reports by type
     */
    public function scopeByType($query, string $type)
    {
        return $query->where('report_type', $type);
    }

    /**
     * Get reports by category
     */
    public function scopeByCategory($query, string $category)
    {
        return $query->where('report_category', $category);
    }

    /**
     * Get reports by status
     */
    public function scopeByStatus($query, string $status)
    {
        return $query->where('status', $status);
    }

    /**
     * Get reports by format
     */
    public function scopeByFormat($query, string $format)
    {
        return $query->where('format', $format);
    }

    /**
     * Get reports generated by specific user
     */
    public function scopeByUser($query, int $userId)
    {
        return $query->where('generated_by', $userId);
    }

    /**
     * Get reports within date range
     */
    public function scopeInDateRange($query, $startDate, $endDate)
    {
        return $query->whereBetween('generated_at', [$startDate, $endDate]);
    }

    /**
     * Get recent reports
     */
    public function scopeRecent($query, int $days = 7)
    {
        return $query->where('generated_at', '>=', now()->subDays($days));
    }

    /**
     * Get scheduled reports
     */
    public function scopeScheduled($query)
    {
        return $query->whereNotNull('scheduled_at')
                    ->where('status', 'scheduled');
    }

    /**
     * Get completed reports
     */
    public function scopeCompleted($query)
    {
        return $query->where('status', 'completed');
    }

    /**
     * Get failed reports
     */
    public function scopeFailed($query)
    {
        return $query->where('status', 'failed');
    }

    /**
     * Get expired reports
     */
    public function scopeExpired($query)
    {
        return $query->where('expires_at', '<', now());
    }

    /**
     * Get reports that need to be generated
     */
    public function scopePendingGeneration($query)
    {
        return $query->where('scheduled_at', '<=', now())
                    ->where('status', 'scheduled');
    }

    /**
     * Get reports by file size range
     */
    public function scopeByFileSize($query, int $minSize, int $maxSize = null)
    {
        if ($maxSize) {
            return $query->whereBetween('file_size', [$minSize, $maxSize]);
        }
        return $query->where('file_size', '>=', $minSize);
    }

    /**
     * Get reports with specific configuration
     */
    public function scopeWithConfig($query, array $config)
    {
        foreach ($config as $key => $value) {
            $query->whereJsonContains("report_config->{$key}", $value);
        }
        return $query;
    }

    /**
     * Get reports for dashboard
     */
    public function scopeForDashboard($query, string $dashboardType = 'executive')
    {
        return $query->where('report_type', 'like', "%{$dashboardType}%")
                    ->where('status', 'completed')
                    ->orderBy('generated_at', 'desc')
                    ->limit(10);
    }

    /**
     * Get reports for export
     */
    public function scopeForExport($query, array $filters = [])
    {
        $query->where('status', 'completed');

        if (isset($filters['type'])) {
            $query->byType($filters['type']);
        }

        if (isset($filters['category'])) {
            $query->byCategory($filters['category']);
        }

        if (isset($filters['start_date']) && isset($filters['end_date'])) {
            $query->inDateRange($filters['start_date'], $filters['end_date']);
        }

        if (isset($filters['user_id'])) {
            $query->byUser($filters['user_id']);
        }

        return $query->orderBy('generated_at', 'desc');
    }

    /**
     * Get reports for cleanup (old and expired)
     */
    public function scopeForCleanup($query, int $daysOld = 30)
    {
        return $query->where(function($q) use ($daysOld) {
            $q->where('generated_at', '<', now()->subDays($daysOld))
              ->orWhere('expires_at', '<', now());
        });
    }

    /**
     * Get reports for analytics
     */
    public function scopeForAnalytics($query, array $params = [])
    {
        $query->where('status', 'completed');

        if (isset($params['time_period'])) {
            $query->recent($params['time_period']);
        }

        if (isset($params['report_types'])) {
            $query->whereIn('report_type', $params['report_types']);
        }

        return $query;
    }

    /**
     * Get reports for user activity
     */
    public function scopeForUserActivity($query, int $userId, int $days = 30)
    {
        return $query->where('generated_by', $userId)
                    ->where('generated_at', '>=', now()->subDays($days))
                    ->orderBy('generated_at', 'desc');
    }

    /**
     * Get reports for system health monitoring
     */
    public function scopeForSystemHealth($query)
    {
        return $query->where('generated_at', '>=', now()->subHours(24))
                    ->selectRaw('
                        report_type,
                        format,
                        status,
                        COUNT(*) as total_reports,
                        AVG(file_size) as avg_file_size,
                        COUNT(CASE WHEN status = "failed" THEN 1 END) as failed_reports
                    ')
                    ->groupBy('report_type', 'format', 'status');
    }

    /**
     * Get reports for performance analysis
     */
    public function scopeForPerformanceAnalysis($query, string $timeframe = 'day')
    {
        $groupBy = match($timeframe) {
            'hour' => 'DATE_FORMAT(generated_at, "%Y-%m-%d %H:00:00")',
            'day' => 'DATE(generated_at)',
            'week' => 'YEARWEEK(generated_at)',
            'month' => 'DATE_FORMAT(generated_at, "%Y-%m")',
            default => 'DATE(generated_at)'
        };

        return $query->where('status', 'completed')
                    ->where('generated_at', '>=', now()->subDays(30))
                    ->selectRaw("
                        {$groupBy} as period,
                        report_type,
                        COUNT(*) as report_count,
                        AVG(file_size) as avg_file_size,
                        SUM(file_size) as total_size
                    ")
                    ->groupBy('period', 'report_type')
                    ->orderBy('period', 'desc');
    }

    /**
     * Get reports for storage analysis
     */
    public function scopeForStorageAnalysis($query)
    {
        return $query->selectRaw('
                format,
                report_type,
                COUNT(*) as report_count,
                SUM(file_size) as total_size,
                AVG(file_size) as avg_size,
                MAX(file_size) as max_size,
                MIN(file_size) as min_size
            ')
            ->groupBy('format', 'report_type')
            ->orderBy('total_size', 'desc');
    }

    /**
     * Get reports for trend analysis
     */
    public function scopeForTrendAnalysis($query, string $metric = 'count', int $days = 30)
    {
        $selectField = match($metric) {
            'count' => 'COUNT(*)',
            'size' => 'SUM(file_size)',
            'avg_size' => 'AVG(file_size)',
            default => 'COUNT(*)'
        };

        return $query->where('generated_at', '>=', now()->subDays($days))
                    ->selectRaw("
                        DATE(generated_at) as date,
                        report_type,
                        {$selectField} as metric_value
                    ")
                    ->groupBy('date', 'report_type')
                    ->orderBy('date', 'asc');
    }

    /**
     * Get reports for compliance audit
     */
    public function scopeForComplianceAudit($query, array $complianceRules = [])
    {
        $query->where('status', 'completed');

        foreach ($complianceRules as $rule) {
            $field = $rule['field'] ?? 'report_type';
            $operator = $rule['operator'] ?? '=';
            $value = $rule['value'];

            $query->where($field, $operator, $value);
        }

        return $query->orderBy('generated_at', 'desc');
    }

    /**
     * Get reports for backup analysis
     */
    public function scopeForBackupAnalysis($query)
    {
        return $query->where('status', 'completed')
                    ->where('generated_at', '>=', now()->subDays(7))
                    ->selectRaw('
                        DATE(generated_at) as backup_date,
                        COUNT(*) as reports_backed_up,
                        SUM(file_size) as total_backup_size
                    ')
                    ->groupBy('backup_date')
                    ->orderBy('backup_date', 'desc');
    }

    /**
     * Relationship to user who generated the report
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'generated_by');
    }

    /**
     * Get the user who generated this report (alias for user)
     */
    public function generatedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'generated_by');
    }

    /**
     * Get the template used for this report
     */
    public function template(): BelongsTo
    {
        return $this->belongsTo(ReportTemplate::class, 'template_id');
    }

    /**
     * Check if report is expired
     */
    public function isExpired(): bool
    {
        return $this->expires_at && $this->expires_at->isPast();
    }

    /**
     * Check if report is scheduled
     */
    public function isScheduled(): bool
    {
        return $this->status === 'scheduled' && $this->scheduled_at;
    }

    /**
     * Check if report is ready for generation
     */
    public function isReadyForGeneration(): bool
    {
        return $this->isScheduled() && $this->scheduled_at->isPast();
    }

    /**
     * Get file size in human readable format
     */
    public function getFileSizeHumanAttribute(): string
    {
        if (!$this->file_size) {
            return '0 B';
        }

        $units = ['B', 'KB', 'MB', 'GB'];
        $size = $this->file_size;
        $unit = 0;

        while ($size >= 1024 && $unit < count($units) - 1) {
            $size /= 1024;
            $unit++;
        }

        return round($size, 2) . ' ' . $units[$unit];
    }

    /**
     * Get report age in days
     */
    public function getAgeInDaysAttribute(): int
    {
        return $this->generated_at ? $this->generated_at->diffInDays(now()) : 0;
    }

    /**
     * Get report configuration value
     */
    public function getConfigValue(string $key, $default = null)
    {
        return data_get($this->report_config, $key, $default);
    }

    /**
     * Set report configuration value
     */
    public function setConfigValue(string $key, $value): void
    {
        $config = $this->report_config ?? [];
        data_set($config, $key, $value);
        $this->report_config = $config;
    }
} 